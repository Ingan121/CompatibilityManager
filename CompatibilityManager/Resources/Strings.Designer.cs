//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CompatibilityManager.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CompatibilityManager.Resources.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reduced color mode.
        /// </summary>
        public static string ColorMode {
            get {
                return ResourceManager.GetString("ColorMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 16-bit (65536) color.
        /// </summary>
        public static string ColorMode_COLOR16BIT {
            get {
                return ResourceManager.GetString("ColorMode_COLOR16BIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 8-bit (256) color.
        /// </summary>
        public static string ColorMode_COLOR256 {
            get {
                return ResourceManager.GetString("ColorMode_COLOR256", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run this program in compatibility mode for:.
        /// </summary>
        public static string CompatibilityMode {
            get {
                return ResourceManager.GetString("CompatibilityMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Vista.
        /// </summary>
        public static string CompatibilityMode_VISTARTM {
            get {
                return ResourceManager.GetString("CompatibilityMode_VISTARTM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Vista (Service Pack 1).
        /// </summary>
        public static string CompatibilityMode_VISTASP1 {
            get {
                return ResourceManager.GetString("CompatibilityMode_VISTASP1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Vista (Service Pack 2).
        /// </summary>
        public static string CompatibilityMode_VISTASP2 {
            get {
                return ResourceManager.GetString("CompatibilityMode_VISTASP2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows 7.
        /// </summary>
        public static string CompatibilityMode_WIN7RTM {
            get {
                return ResourceManager.GetString("CompatibilityMode_WIN7RTM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows 8.
        /// </summary>
        public static string CompatibilityMode_WIN8RTM {
            get {
                return ResourceManager.GetString("CompatibilityMode_WIN8RTM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows 95.
        /// </summary>
        public static string CompatibilityMode_WIN95 {
            get {
                return ResourceManager.GetString("CompatibilityMode_WIN95", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows 98.
        /// </summary>
        public static string CompatibilityMode_WIN98 {
            get {
                return ResourceManager.GetString("CompatibilityMode_WIN98", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows XP (Service Pack 2).
        /// </summary>
        public static string CompatibilityMode_WINXPSP2 {
            get {
                return ResourceManager.GetString("CompatibilityMode_WINXPSP2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows XP (Service Pack 3).
        /// </summary>
        public static string CompatibilityMode_WINXPSP3 {
            get {
                return ResourceManager.GetString("CompatibilityMode_WINXPSP3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disable fullscreen optimizations.
        /// </summary>
        public static string DisableFullscreenOptimizations {
            get {
                return ResourceManager.GetString("DisableFullscreenOptimizations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Override high DPI scaling behavior.
        ///Scaling performed by:.
        /// </summary>
        public static string DPIScaling {
            get {
                return ResourceManager.GetString("DPIScaling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System.
        /// </summary>
        public static string DPIScaling_DPIUNAWARE {
            get {
                return ResourceManager.GetString("DPIScaling_DPIUNAWARE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System (Enhanced).
        /// </summary>
        public static string DPIScaling_GDIDPISCALING {
            get {
                return ResourceManager.GetString("DPIScaling_GDIDPISCALING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application.
        /// </summary>
        public static string DPIScaling_HIGHDPIAWARE {
            get {
                return ResourceManager.GetString("DPIScaling_HIGHDPIAWARE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run in 640 x 480 resolution.
        /// </summary>
        public static string Resolution640x480 {
            get {
                return ResourceManager.GetString("Resolution640x480", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run this program as an administrator.
        /// </summary>
        public static string RunAsAdministrator {
                return ResourceManager.GetString("RunAsAdministrator", resourceCulture);
            get {
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;t detect OS version. This should never happen: if it happened, either all hell broke loose, Windows 11 got released, or I&apos;m (most likely) just a very bad programmer. Please report ASAP!.
        /// </summary>
        public static string unknownOSException {
            get {
                return ResourceManager.GetString("unknownOSException", resourceCulture);
            }
        }
    }
}
